# Note you may need to add the following to your printer.cfg somewhere (without the comments of course) for the Kinematic position stuff below to work.
#[force_move]
#enable_force_move: True
[homing_override]
axes: xyz
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %} ; check if all axes are being homed
 
    {% if home_all or 'X' in params %} ; if homing all axes or just x
        _HOME_X ; run x homing macro
    {% endif %}
    {% if home_all or 'Y' in params %} ; if homing all axes or just y
       G28 Y
    {% endif %}
    {% if home_all or 'Z' in params %} ; if homing all axes or just z
        _HOME_Z ; run z homing macro
    {% endif %}
 
    G90
 
[gcode_macro _HOME_X]
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set RUN_CURRENT_XA = printer.configfile.settings['tmc2240 stepper_x1'].run_current|float %}
    {% set RUN_CURRENT_YB = printer.configfile.settings['tmc2240 stepper_y1'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %} # tweak this setting until you get a perfect bump stop
    SET_TMC_CURRENT STEPPER=stepper_x  CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y  CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT=0
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT=0
    # Home
    G28 X
    # Move away
    G91
    G1 X-20 F1200
    
    # Wait just a secondâ€¦ (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    
 
    SET_TMC_CURRENT STEPPER=stepper_x  CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y  CURRENT={RUN_CURRENT_Y}
    SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={RUN_CURRENT_XA}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={RUN_CURRENT_YB}
 
[gcode_macro _HOME_Z]
gcode:
  G90
  G1 X150 Y150 F3000
  G28 Z ; run z homing macro


[gcode_macro _CG28]
description: Homing only if necessary
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    
[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}
    
    SAVE_GCODE_STATE NAME=HEATSOAK
    SET_FAN_SPEED FAN=Nevermore SPEED=0.6               ; turn on nevermore
    SET_FAN_SPEED FAN=bedfan SPEED=1.0               ; turn on nevermore
    M140 S{t}                                       ; heat bed
    {% if t >= 100 %}
        M104 S150                                   ; set hotend to no-ooze temp
        M106 S50                                   ; turn on part fan (80%)
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
        _CG28
        G90
        G0 Z{printer.toolhead.axis_maximum.z/2} F{z_hop_speed}
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
    RESTORE_GCODE_STATE NAME=HEATSOAK

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro BEACON_ZTILT] # Z_TILT FOR USING BEACON PROBE
gcode:
    _CG28 # home if not homed
    Z_TILT_ADJUST horizontal_move_z=10 retries=0 retry_tolerance=1.000
    Z_TILT_ADJUST horizontal_move_z=2
    G28 Z

[gcode_macro PRINT_START]
gcode:
# Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}
    M117 Homing...                 ; display message

    SAVE_GCODE_STATE NAME=start

    M117 Starting warmup
    G1 Z20 F{z_hop_speed}                      ; move nozzle away from bed
    M117 Warmup
    M104 S140                                                                            ; set hotend to no-ooze temp
    M140 S{bedtemp}                                                                          ; set bed to target temp
    _CG28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                 ; - if chamber is not at temp yet:
        HEATSOAK T={bedtemp} MOVE=1                                                          ;   heatsoak macro + park in center
        M190 S{bedtemp}                                                                      ;   wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}           ;   wait for chamber final temp
    {% else %}                                                                           ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bedtemp-2) %}                                ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={bedtemp} MOVE=1                                                      ;       heatsoak and park
            M190 S{bedtemp}                                                                  ;       wait for bed final temp
        {% else %}                                                                       ; -- and bed is already heated:
            HEATSOAK T={bedtemp} MOVE=0                                                      ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %}                         ; set bed temp and wait for it reach temp
    M106 S0
    BED_MESH_CLEAR
    G28                                ; Home XYZ and do QGL
    #M109 S180              ; M109 heat and wait for it to reach temp
    #G1 E-1.0 F1500                 ; retract filament
    #CLEAN_NOZZLE
    #ATTACH_PROBE_LOCK
    BEACON_ZTILT
    G28 Z
    #G0 X150 Y150 Z30 F3600
    BED_MESH_CALIBRATE
    G28 Z
    #G0 Z20
    #DOCK_PROBE_UNLOCK
    M109 S{hotendtemp}
    
    M117 Starting Print
    RESTORE_GCODE_STATE NAME=start

   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    #SET_FAN_SPEED FAN=BedInner SPEED=0
    SET_FAN_SPEED FAN=Nevermore SPEED=0               ; turn on nevermore
    SET_FAN_SPEED FAN=bedfan SPEED=0               ; turn on nevermore
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro RESUME]
#description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  50
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  0
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True